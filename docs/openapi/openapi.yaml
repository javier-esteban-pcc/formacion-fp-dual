openapi: 3.0.0
info:
  title: Blog API
  version: '1.0'
  summary: Blog API
  description: Blog API
servers:
  - url: 'http://localhost:9200'
paths:
  /users:
    get:
      summary: List all users
      tags:
        - User
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      operationId: get-users
      description: Get All Users
    post:
      summary: Create new user
      operationId: post-users
      responses:
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                role:
                  type: string
      tags:
        - User
      description: Create a new user
  '/users/{userId}':
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
    get:
      summary: Get user from id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
      operationId: get-user-id
      parameters:
        - schema:
            type: string
          in: query
          name: id
          description: User Id
      tags:
        - User
      description: Get user with id UserId
  /posts:
    get:
      summary: List all posts
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
      operationId: get-posts
      description: ''
      tags:
        - Post
    post:
      summary: Create a new post
      operationId: post-posts
      responses:
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                body:
                  type: string
                userId:
                  type: string
      description: Create a pending Post
      tags:
        - Post
  '/posts/{postId}':
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    get:
      summary: Get post from Id
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Not Found
      operationId: get-posts-postId
      description: Get Post with id postId
      tags:
        - Post
  '/post/{postId}/publish':
    parameters:
      - schema:
          type: string
        name: postId
        in: path
        required: true
    post:
      summary: Mark post as published
      operationId: post-post-postId-publish
      responses:
        '204':
          description: No Content
      description: Mark post with id PostId as published
      tags:
        - Post
  /payments:
    get:
      summary: List all payments
      tags:
        - Payment
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
      operationId: get-payments
      description: Get all payments
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        id:
          type: string
          pattern: '[0-9a-f]+'
          minLength: 13
          maxLength: 13
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - Administrador
            - Editor
    Post:
      title: Post
      type: object
      properties:
        id:
          type: string
          pattern: '[0-9a-f]+'
          minLength: 13
          maxLength: 13
        title:
          type: string
        body:
          type: string
        createdAt:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - Pending
            - Published
        userId:
          type: string
          pattern: '[0-9a-f]+'
          minLength: 13
          maxLength: 13
    Payment:
      title: Payment
      type: object
      properties:
        id:
          type: string
          pattern: '[0-9a-f]+'
          minLength: 13
          maxLength: 13
        amount:
          type: number
          minimum: 0
          format: float
        createdAt:
          type: string
          format: date-time
        userId:
          type: string
        postId:
          type: string
tags:
  - name: Post
  - name: User
